---
title: "**Customising & running nf-core pipelines**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

### **2.1.1. Download the pipeline code**

In this session we are using Singularity containers to manage software installation for all nf-core/rnaseq tools. Confirm the Singularity cache directory we set in the previous session using the `$NXF_SINGULARITY_CACHEDIR` [Nextflow environmental variable](https://www.nextflow.io/docs/latest/config.html#environment-variables): 

```default
echo $NXF_SINGULARITY_CACHEDIR
```
:eyes: This should match the directory you set in the previous session: 

```default
/home/training/singularity_cache
```
The public [institutional configs](https://github.com/nf-core/configs) were downloaded to the `configs` directory. The code base for our pipeline will be stored in the `workflow` directory. The files and directories we will be working with in this session are:

|Feature                |Importance                                                         |
|-----------------------|-------------------------------------------------------------------|
|`conf/`                |Contains files, default configuration settings and optional profiles that build on global settings set by `nextflow.config`|
|`main.nf`              |The executable Nextflow script that defines the structure and flow of the workflow. It calls `workflows/rnaseq.nf`|
|`modules/`             |Contains Nextflow processes used by the workflow. Each process is split into a module with its own `main.nf` file|
|`workflows/rnaseq.nf`  |The complete rnaseq pipeline, containing modules and subworkflows that are connected by channels |



### **2.1.2. Design your run command**

As we learnt in [lesson 1.2.4](../notebooks/1_configure.md#viewing-parameters), all nf-core pipelines have a unique set of pipeline-specific parameters that can be used in conjunction with Nextflow parameters to configure the workflow. Generally, nf-core pipelines can be customised at a few different levels:

|Level of effect      |Customisation feature                                                        |
|---------------------|-----------------------------------------------------------------------------|
|The workflow         |Where diverging methods are available for a pipeline, you may choose a path to follow  |
|A process            |Where more than one tool is available for a single step, you may choose which to use  |
|A tool               |Apply specific thresholds or optional flags for a tool on top of the default run command |
|Compute resources    |Specify resource thresholds or software execution methods for the workflow or a process  |

All nf-core pipelines are provided with comprehensive documentation that explain what the default workflow structure entails and options for customising this based on your needs. It is important to remember that nf-core pipelines typically do not include all possible tool parameters. This makes it challenging to piece these different sources of information together to determine which parameters you should be using. 

The following sections of the documentation can be used to understand what the pipeline is doing and inform your choices about aspects of pipeline-specific customisations:

+------------------------------------------------------------+-------------------+---------------------+
| Docs                                                       | Description       | Customisation level |
+============================================================+===================+=====================+
| [Introduction](https://nf-co.re/rnaseq/3.11.1)             |  Workflow summary | - workflow          |
|                                                            |                   | - process           |
+------------------------------------------------------------+-------------------+---------------------+
| [Usage](https://nf-co.re/rnaseq/3.11.1/usage)              | Inputs and options| - workflow          |
|                                                            |                   | - process           |
+------------------------------------------------------------+-------------------+---------------------+
| [Parameters](https://nf-co.re/rnaseq/3.11.1/parameters)    | Available flags   | - workflow          |
|                                                            |                   | - process           |
|                                                            |                   | - compute resources |
+------------------------------------------------------------+-------------------+---------------------+
| [Output](https://nf-co.re/rnaseq/3.11.1/output)            | Files from all    | - workflow          |
|                                                            | processes         | - process           |
|                                                            | processes         | - tool              |
+------------------------------------------------------------+-------------------+---------------------+
</br>

#### **Pipeline structure**

:eyes: Looking at the nf-core/rnaseq pipeline structure provided in the [introduction](https://nf-co.re/rnaseq/3.11.1), we can see that the developers have:

1. Organised the workflow into 5 stages based on the type of work that is being done
2. Provided a choice of multiple methods and specified defaults
3. Provided a choice of tool for some steps

![](../figs/2.1_pipeline-choice.png)

::: callout-tip
### **Thoughts? :thought_balloon:**{.unlisted}

:question: Observing the diagram above, which statement is true regarding the choice of alignment and quantification methods provided by the nf-core/rnaseq pipeline?

**a.** The pipeline uses a fixed method for read alignment and quantification.  
**b.** Users can choose between several different methods for read alignment and quantification.   
**c.** The pipeline always performs read alignment and quantification using STAR or HISAT2.     
**d.** The choice of alignment and quantification method is determined automatically based on the input data.  
:::

::: {.callout-note appearance="simple" collapse="true"}
### Answer

The correct answer is **b**. The nf-core/rnaseq pipeline allows users to choose between pseudo-alignment and quantification or several different methods for genome-based read alignment and quantification. 

* a is incorrect because the pipeline is not limited to a single method.   
* c is incorrect because while read alignment and quantification using STAR and Salmon are the default method, users can choose pseudo-alignment method.
* d is also incorrect, as the pipeline only accepts fastq files as input and the choice of alignment and quantification method must be specified by the user.
:::

</br>

#### **Default pipeline usage**

The number and type of default and optional parameters an nf-core pipeline accepts is at the discretion of it's developers. However, at a minimum, nf-core pipelines typically:

* Require users to specify a [sample sheet](https://nf-co.re/rnaseq/3.11.1/usage#samplesheet-input)  (`--input`) detailing sample data and relevant metadata
* Autogenerate or acquire missing reference files from [iGenomes](https://github.com/nf-core/rnaseq/blob/master/conf/igenomes.config) ( using the `--genome`) if not provided by the user.

You can see the recommended (typical) run command and all the parameters available for the nf-core/rnaseq pipeline by running:

```default
nextflow run nf-core-rnaseq-3.11.1 --help 
```

The typical or recommended run command for this pipeline is provided at the top of the screen: 

![](../figs/2.1_default-command.png)

It outlines a requirement for a few basic things: 

* An input samplesheet 
* A location to store outputs 
* Relevant reference data 
* A software management method 

::: {.callout-important}
### **Reminder: hyphens matter in Nextflow!**
Nextflow-specific parameters use one (`-`) hyphen, whereas pipeline-specific parameters use two (`--`). In the typical run command above `-profile` is a **Nextflow** parameter, while `--input` is an **nf-core** parameter.
::: 

</br>

#### **Required input: `--input`**

Most of us will need to adjust the default run command for our experiments. Today we'll be adjusting the typical nf-core/rnaseq run command by: 

1. Providing our own reference files
2. Using the Singularity software management profile, instead of Docker 
3. Customising the execution of some processes 
4. Specifying the computing resource limitations of our instances (2 CPUs, 8 Gb RAM)

Our input fastq files (`fastqs/`), reference data (`mm10_reference/`), and full sample sheet (`samplesheet.csv`) are already available on an external file system called CernVM-FS that we can access from our Nimbus instances. Take a look at the files: 

```default
ls -l /cvmfs/data.biocommons.aarnet.edu.au/training_materials/SIH_training/UnlockNfcore_0523
```

```default
drwxrwxr-x 2 training training 4096 Feb 14 05:36 fastqs
drwxrwxr-x 3 training training 4096 Feb 14 05:46 mm10_reference
-rw-rw-r-- 1 training training  641 Feb 16 05:57 samplesheet.csv
```

Our CVMFS path is very long, for the sake of tidiness, store the CVMFS path in a variable for our run command:

```default
materials=/cvmfs/data.biocommons.aarnet.edu.au/training_materials/SIH_training/UnlockNfcore_0523
```

Given we are only testing the pipeline in this session, we only need to work with a couple of samples. Copy the first two samples from the full prepared sample sheet to a local version of the file:

```default
head -n 3 $materials/samplesheet.csv > samplesheet.csv
```

```default
sample,fastq_1,fastq_2,strandedness
SRR3473989,/cvmfs/data.biocommons.aarnet.edu.au/training_materials/SIH_training/UnlockNfcore_0523/fastqs/SRR3473989_selected.fastq.gz,,forward
SRR3473988,/cvmfs/data.biocommons.aarnet.edu.au/training_materials/SIH_training/UnlockNfcore_0523/fastqs/SRR3473988_selected.fastq.gz,,forward
```

</br>

#### **Required input: reference data**

Many nf-core pipelines have a minimum requirement for reference data inputs. The input reference data requirements for this pipeline are provided in the [usage documentation](https://nf-co.re/rnaseq/3.11.1/usage#reference-genome-files). We can replace the `--genome` flag in the typical run command with our own files. To see what reference files we can specify using parameters, rerun the pipeline's help command to view all the available parameters: 

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf --help --show_hidden_params
```

From the **Reference genome options** parameters, we will provide our own files using: 

* `--fasta $materials/mm10_reference/mm10_chr18.fa`  
* `--gtf $materials/mm10_reference/mm10_chr18.gtf`
* `--star_index $materials/mm10_reference/STAR`
* `--salmon_index $materials/mm10_reference/salmon-index`

::: callout-important

### **Beware the hidden parameters!**
Notice the message at the bottom of the screen: 

```default
!! Hiding 24 params, use --show_hidden_params to show them !!
```
Keep in mind that both this help command and the nf-core parameters documentation hides less common parameters. 
::: 

</br>

#### **Optional parameters**

Now that we have prepared our input and reference data, we will customise the typical run command by:

1. Using Nextflow's `-profile` parameter to specify that we will be running the Singularity profile instead of the Docker profile
2. Adding additional process-specific flags to [skip duplicate read marking](https://nf-co.re/rnaseq/3.11.1/parameters#skip_markduplicates), [save trimmed reads](https://nf-co.re/rnaseq/3.11.1/parameters#save_trimmed) and [save unaligned reads](https://nf-co.re/rnaseq/3.11.1/parameters#save_unaligned)
3. Adding additional max resource flags to specify the [number of CPUs](https://nf-co.re/rnaseq/3.11.1/parameters#max_cpus) and [amount of memory](https://nf-co.re/rnaseq/3.11.1/parameters#max_memory) available to the pipeline. 

The parameters we will use are:

* `-profile singularity`
* `--skip_markduplicates true`
* `--save_trimmed true`
* `--save_unaligned true`
* `--max_memory '6.GB'`
* `--max_cpus 2`

::: {.callout-tip collapse="true"}
### **What if the parameter I want to apply isn't available?**

Recall from [session 1](1.3_configure.md#custom-configuration-files) that nf-core modules use `ext.args` to pass additional arguments to a module. This uses a special Nextflow directive [`ext`](https://www.nextflow.io/docs/latest/process.html#ext). If an nf-core pipeline does not have a pre-defined parameter for a process, you may be able to implement `ext.args` as we do in [lesson 2.4.4](2.4_multiConfig.html#apply-external-arguments). 

The inclusion of `ext.args` is currently best practice for all DSL2 nf-core modules where additional parameters may be required to run a process. However, this may not be implemented for all modules in all nf-core pipelines. Depending on the pipeline, these process modules may not have defined the `ext.args` variable in the script blocks and is thus not available for applying customisation. If that is the case consider submitting a feature request or a making pull request on the pipeline's GitHub repository to implement this!
:::

You can see how we've customised the typical run command in the diagram below: 

![](../figs/2.1_custom-command.png)

</br>

### **2.1.3. Run the pipeline**

Now that we have prepared our data and chosen which parameters to apply, run the pipeline: 

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
    --input samplesheet.csv \
    --outdir Lesson-2.1 \
    --fasta $materials/mm10_reference/mm10_chr18.fa \
    --gtf $materials/mm10_reference/mm10_chr18.gtf \
    --star_index $materials/mm10_reference/STAR \
    --salmon_index $materials/mm10_reference/salmon-index \
    -profile singularity \
    --skip_markduplicates \
    --save_trimmed true \
    --save_unaligned true \
    --max_memory '6.GB' \
    --max_cpus 2
```

:eyes:  Take a look at the stdout printed to the screen. Your workflow configuration and parameter customisations are all documented here. You can use this to confirm if your parameters have been correctly passed to the run command: 

![](../figs/2.1_nf-core-stdout.png)

As the workflow starts, you will also see a number of processes spawn out underneath this. Recall from [session 1](1.1_nextflow.html#processes-and-channels) that processes are executed independently and can run in parallel. Nextflow manages the data dependencies between processes, ensuring that each process is executed only when its input data is available and all of its dependencies have been satisfied. 

To understand how this is coordinated, consider the STAR_ALIGN process that is being run. 

![](../figs/2.1_nf-core_processes.png)

:eyes: You'll notice a few things: 

* We can see which inputs are being processed by looking at the end of the process name
* When a process starts it progressively spawns tasks for all inputs to be processed 
* A single TRIMGALORE process is run across both samples in our `samplesheet.csv` before STAR_ALIGN begins 
* Once a TRIMGALORE task is completed for a sample, the STAR_ALIGN task for that sample begins 
* When the STAR_ALIGN process starts, it spawns 2 tasks.

</br>

### **2.1.4. Examine the outputs**

Once your pipeline has completed, you should see this message printed to your terminal:

```default
-[nf-core/rnaseq] Pipeline completed successfully with skipped sampl(es)-
-[nf-core/rnaseq] Please check MultiQC report: 2/2 samples failed strandedness check.-
Completed at: 21-Apr-2023 03:58:56
Duration    : 9m 16s
CPU hours   : 0.3
Succeeded   : 66
```

The pipeline ran successfully, however, note the warning about all samples having failed the strandedness check. We'll explore that in the next lesson. 

In the meantime, list (`ls -la`) the contents of your directory, you'll see a few new directories (and a hidden directory and log file) have been created:

```default
total 416
drwxrwxr-x   7 training training 4.0K Apr 21 03:44 .
drwxr-x---  15 training training 4.0K Apr 21 01:56 ..
drwxrwxr-x   4 training training 4.0K Apr 21 03:58 .nextflow
-rw-rw-r--   1 training training 371K Apr 21 03:58 .nextflow.log
-rw-rw-r--   1 training training  17K Apr 21 03:50 .nextflow.log.1
drwxrwxr-x   7 training training 4.0K Apr 21 03:58 Lesson-2.1
drwxrwxr-x   4 training training 4.0K Apr 21 02:08 nf-core-rnaseq-3.11.1
-rw-rw-r--   1 training training  563 Apr 21 03:14 samplesheet.csv
drwxrwxr-x 143 training training 4.0K Apr 21 03:58 work
```

:eyes: Nextflow has created 2 new output directories, **work** and **Lesson-2.1** in the current directory. 

#### The `work` directory

As each job is run, a unique sub-directory is created in the `work` directory. These directories house temporary files and various command logs created by a process. We can find all information regarding this process that we need to troubleshoot a failed process. 

#### The `Lesson-2.1` directory

All final outputs will be presented in a directory specified by the `--outdir` flag. 

#### The `.nextflow` directory

This directory contains a `cache` subdirectory to store cached data such as downloaded files and can be used to speed up subsequent pipeline runs. It also contains a `history` file which contains a record of pipeline executions including run time, the unique run name, and command line arguments used. 

#### The `.nextflow.log` file

This file is created by Nextflow during the execution of a pipeline and contains information about all processes and any warnings or errors that occurred during execution. 

::: callout-tip
### **Challenge**{.unlisted}

Was the runtime for the STAR_ALIGN process comparable for samples SRR3473988 and SRR3473989? 

:bulb: Hint: use the `nextflow log <run_name> -f` command and Nextflow [trace fields](https://www.nextflow.io/docs/latest/tracing.html#trace-report). 
:::

::: {.callout-caution collapse="true"}
### Solution

Run the following: 
```default
nextflow log <run_name> -f name,realtime | grep "STAR_ALIGN" 
```

Read alignment was comparable for both samples:
```default
NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (SRR3473989) 2m 37s
NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN (SRR3473988) 2m 17s
```
:::

</br>

::: {.callout-note}
### **Key points**
- nf-core pipelines are provided with sensible default settings and required inputs. 
- An nf-core pipeline's Usage, Output, and Parameters documentation can be used to design a suitable run command. 
- Parameters can be used to customise the workflow, processes, tools, and compute resources.  
:::





::: callout-tip
### Objectives{.unlisted}

- Learn how to check the default configurations that are applied to nf-core workflows
- Understand how to over-ride default configurations with custom configuration files
- Write a custom config file for your local environment and apply this configuration to your run
- Observe the hierarchy of parameter configuration in action  
:::

In the previous exercises, we have explored how to customise a run with **workflow parameters** on the command line or within a parameters file. In this lesson we will now look at **configuration settings**, which manage **how the workflow is implemented on your system**. 

::: callout-note
### 
Nextflow's portability is achieved by separating **workflow implementation** (input data, custom parameters, etc.) from the **configuration settings** (tool access, compute resources, etc.) required to execute it. This portability facilitates **reproducibility**: by applying the same parameters as a colleague, and adjusting configurations to suit your platform, you can achieve the same results on any machine with no requirement to edit the code.
:::  



### **2.3.1. Default nf-core configuration**

Recall that when a pipeline script is launched, Nextflow looks for [configuration files in multiple locations](https://www.nextflow.io/docs/latest/config.html#configuration-file): 

![](../figs/2.3_config_priority_order_no_text_overlay.png){width=65%}


At level 5 of the above priority list is the file `workflow/nextflow.config`. This file also applies `workflow/conf/base.config` to the workflow execution with the following statement:

```default
includeConfig 'conf/base.config'
```

Together, these two configuration files define the default execution settings and parameters of an nf-core workflow. 


Let's take a look at these two configuration files to gain an understanding of how defaults are applied.

Using the `more` command, scroll through `workflow/conf/base.config`:
``` default
more nf-core-rnaseq-3.11.1/workflow/conf/base.config
```

The generic `base.config` sets the default **compute resource settings** to be used by the processes in the nf-core workflow. It uses process labels to enable different sets of resources to be applied to groups of processes that require similar compute. These labels are specified within the `main.nf` file for a process. 

<span style="color:#000080;"> We can over-ride these default compute resources using a custom configuration file.</span>

Then take a few moments to scroll through `workflow/nextflow.config`:
``` default
more nf-core-rnaseq-3.11.1/workflow/nextflow.config
```

The `nextflow.config` file is more **workflow-specific**, and sets the **defaults for the workflow parameters**, as well as defines profiles to change the default **software access** from `$PATH` to the specified access method, eg Singularity. 

<span style="color:#000080;"> We can over-ride these parameters on the command line or with a parameters file, and over-ride the default behaviour of searching for tools on `$PATH` by specifying a `-profile`.</span>  

<br/>

Default settings for `--max_cpus`, `--max_memory` and `--max_time` are applied within the nf-core `workflow/nextflow.config`. These are generous values expecting to be over-ridden with your custom settings, to ensure that no single process attempts to use more resources than you have available on your platform. 

Within `workflow/conf/base.config`, the `check_max()` function over-rides the process resources *if the custom 'max' setting is lower than the default setting for that process*. 

![](../figs/2.3_check_max.png)
<br/><br/>

::: callout-tip
### Challenge{.unlisted}

- What are the default settings for CPU, memory and walltime for the `STAR_ALIGN` module?
- How have these defaults been changed from our applied customisations in the previous runs?
:::

::: {.callout-caution collapse="true"}
### Solution
To uncover these answers, we need to understand what **process label** has been assigned to the `STAR_ALIGN` module. 
```default
more workflow/modules/nf-core/star/align/main.nf 
# or
grep label workflow/modules/nf-core/star/align/main.nf 
# then 
more nf-core-rnaseq-3.11.1/workflow/conf/base.config
```

`STAR_ALIGN` has the label `process_high` which has the settings 12 CPUs, 72 GB mem, 16 hrs walltime applied by the default `base.config`. We have previosuly applied `--max_cpus 2` and `--max_memory 6.GB`, so the `check_max()` function would have reduced the resources given to the STAR alignment process to 2 CPUs and 6 GB RAM, while retaining the default max walltime. 
:::
<br/><br/>


### **2.3.2. When to use a custom config file**

In our runs so far, we have avoided the need for a custom resource configuration file by:

- Over-riding the default tool access method of `$PATH` by specifying the `singularity` profile defined in `workflow/nextflow.config`
  - Without this, our runs for this workshop would fail because we do not have the workflow tools (eg STAR, salmon) installed locally on our VMs
- Over-riding the default values for CPUs and memory set in `nextflow.config` with `--max_cpus 2` and `--max_memory 6.GB` to fit on our small VMs
  - Without these parameters, our runs would fail at the first process that requests more than this, because Nextflow workflows check that the requested resources are available before attempting to execute a workflow  

These are basic configurations. What if:

- We wanted to increase the resources used above what is requested with process labels to take advantage of high CPU or high memory infrastructures?
- We wanted to run on a HPC or cloud infrastructure? 
- We wanted to execute specific modules on specific node types on a cluster?
- We wanted to use a non-default software container? 
- We wanted to customise outputs beyond what was possible with the nf-core workflow parameters?
 

:bulb: <span style="color:#000080;"> This is all possible with custom configuration files!</span>

The rest of lesson 2.3 will explore custom **resource** configuration files, while [lesson2.4](2.4_multiConfig.html) will focus on **customising outputs**. We won't be covering custom workflow execution on HPCs in this workshop, but please check out our [tips and tricks](../tips_tricks.html#run-nextflow-on-hpc) page later if you are interested in this!
<br/><br/>



### **2.3.3. Institutional config files**

We can set these and other configurations within a custom configuration file that is specific to our institution: this is referred to as an **institutional config**. 

Institutional configs help us create **efficient** workflows that can be **shared** with others to **reproducibly** run the workflow in the same computational environment 
<br/>

::: {.callout-note collapse="true"}
### Why should I be concerned with computational efficiency? :earth_asia: 
Bioinformatics relies on large-scale computational infrastructures and has a significant carbon footprint due to the energy required to run computational workflows. We can optimise our workflows to not only reduce their runtime, but also adopt more sustainable computing practices. This [paper](https://academic.oup.com/mbe/article/39/3/msac034/6526403) makes for an interesting read about the carbon footprint of bioinformatics workflows and tools!
:::
<br/>

In [lesson 1](http://localhost:5645/notebooks/1.3_configure.html#shared-configuration-files) you learnt that there is a [repository of institutional configs](https://github.com/nf-core/configs/tree/master) for nf-core pipelines. These have been contributed to by the community. 

We have created an [nf-core config for Pawsey’s Nimbus cloud](https://github.com/nf-core/configs/blob/master/conf/pawsey_nimbus.config): this (and other institutional configs) was downloaded along with the workflow code. 
<br/><br/>

View the available list of institutional configs we pulled down along with the workflow code:

``` default
ls  nf-core-rnaseq-3.11.1/configs/conf
```

Then take a look at the Pawsey Nimbus config: 

```default
more  nf-core-rnaseq-3.11.1/configs/conf/pawsey_nimbus.config
```
<br/>

::: callout-note
### Using a shared config
We can use one of these configs by specifying `-profile <config_basename>`, and adding any `profiles` from within this config that we wanted to apply to our run to the `-profile` option in a comma-delimted list. 

For example, to use the shared config for [Pawsey's Nimbus VMs](https://github.com/nf-core/configs/blob/master/docs/pawsey_nimbus.md) on our `c2r8` training VMs we would apply the following to our run command: 

``` default
-profile pawsey_nimbus,singularity,c2r8
``` 
:::
<br/>


In the event where your institution does *not* have a publicly available configuration file and/or you want to apply your own customisations, you will need to **write your own institutional config file**.  

:bulb: <span style="color:#000080;"> You can contribute to the nf-core community by [sharing your config!](https://github.com/nf-core/configs/tree/master#adding-a-new-config)</span>
<br/><br/>

For the sake of the exercise, let's assume there wasn't a Pawsey Nimbus config publicly available, and write our own that is specific to our 'c2r8' VMs. 

Open a new file called `custom-nimbus.config` and start writing some Nextflow code by adding: 

```default
// Nimbus nf-core workshop configuration file

profiles {
  workshop {
    
  }
}
```
Using the [profiles scope](https://www.nextflow.io/docs/latest/config.html?highlight=scope#config-profiles) in a configuration file groups attributes that belong to the same profile, in our case a profile we have chosen to name **workshop**. 
<br/><br/>

Inside this **workflow** profile, let's remove the need for the `-profile singularity` flag from our run command by adding another scope called **singularity**:

::: {.callout-note collapse="true"}
### Singularity options
Nextflow has a number of [options for using Singularity](https://www.nextflow.io/docs/latest/config.html?highlight=singularity#scope-singularity) that allow you to control how containers are executed. We are using:

* `enabled` to use Singularity to manage containers automatically 
* `autoMounts` to allow Nextflow to automatically mount host paths when a container is executed
* `cacheDir` to specify the directory Singularity images can be pulled from 
:::

```default
// Nimbus nf-core workshop configuration file

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = '/home/training/singularity_cache'
    }
  }
}
```
<br/><br/>

Now let's address those two resource parameters `--max_memory 6.GB` and `--max_cpus 2`. At the same level as the `singularity` scope, add a `params` scope and specify each parameter underneath: 

::: {.callout-important collapse=true}
### :skull_and_crossbones: <span style="color:#8b0000;">No nf-core params in custom configs!</span>
 When customising nf-core workflows, <span style="color:#8b0000;">**do not add parmeters to custom config files!**</span> The case of `max` resource settings is a <span style="color:#8b0000;">**rare exception**</span> to this rule.

![](../figs/2.3_warn_params_in_configs.png)
[Image source](https://nf-co.re/usage/configuration#custom-configuration-files)
:::

```default
// Nimbus nf-core workshop configuration file

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = '/home/training/singularity_cache'
    }
    params {
      max_cpus   = 2
      max_memory = 6.GB      
    }
  }
}
```
<br/><br/>

Add finally, add a profile description using the `config_profile_description` parameter:


::: {.callout-warning}
### Another parameter within a custom config?!
:speech_balloon: **But I thought that was not allowed?**

Kudos for remembering! It's an important lesson. **Workflow parameters** should definitely *not* be in custom config files. **Resource configurations** on the other hand can have exceptions. Here we are setting resources so that our runs can execute on our environment, and giving the configuration profile that sets them a descriptive name.
:::

```default
// Nimbus nf-core workshop configuration file

profiles {
  workshop {
    singularity {
      enabled     = true
      autoMounts  = true
      cacheDir    = '/home/training/singularity_cache'
    }
    params {
      config_profile_description  = 'Pawsey Nimbus c2r8 profile'
      max_cpus   = 2
      max_memory = 6.GB      
    }
  }
}
```
<br/><br/>


 Save the config then re-run the pipeline, requesting the `workshop` profile be applied from our `custom-nimbus.config` and set the `--outdir` parameter to `Lesson-2.3.3`

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.3.3 \
  -resume
```

::: {.callout-note collapse="true"}
### Using profiles from local configs vs nf-core configs repo
Because our `profile` is described within a local config, we need to specify both the name of the profile we want to apply to the run and the config that describes it. If our config was part of the  nf-core config repository, we would not need to specify the config at `-c`. The basename of the config would be supplied at `-profile` and any profiles within that config that we wanted to apply to the run would be specified in a comma-delimted list. 

For example to run the above command using the [Pawsey Nimbus config from the nf-core config repo](https://github.com/nf-core/configs/blob/master/conf/pawsey_nimbus.config):

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile pawsey_nimbus,singularity,c2r8 
  -params-file workshop-params.yaml \
  --outdir Lesson-2.3.3 \
  -resume
  ```
:::

:eyes: We can see that our custom configurations have been read:

- Our Nimbus config is listed under **Core Nextflow options**
- Our profile description shows under **Institutional config options**
- Our `max_cpus` and `max_memory` show under **Max job request options** 

![](../figs/2.3_run_stdout.png)


:hourglass: Applying the new profile means the processes will execute from scratch rather than from cached files!

While we wait, let's talk about the :elephant: in the room...

::: {.callout-important}
### What was that warning all about?!
This warning appears because we have included a custom config, ie we now have 'multiple configs' because the default `nextflow.config` counts as well! 

![](../figs/2.3_warn_multiple_configs.png)

Recall [lesson 1.3.7](1.3_configure.html#custom-configuration-files) where you attemped to set the parameter `multiqc_title` to your favourite colour within `my_custom_config.config`. The `multiqc_title` parameter displayed in the STDOUT under **'Input/output options'** but was NOT applied to the run! The alarming-looking warning provided by nf-core is a gentle but firm reminder of this very important detail.

**Reminder of what that looks like in action**: if the `multiqc_title` parameter was included as a param in `custom-nimbus.config`, the param and value would appear in the run log but would not actually be applied to the run.

``` default
    params {
      multiqc_title = 'black'
    }
```

![](../figs/2.3_mqc_title_stdout.png)

```default
$ ls Lesson-2.3.3-MQC/multiqc/star_salmon/
multiqc_data  multiqc_plots  multiqc_report.html
```
:::

::: callout-warning
### :hourglass: If your run is still computing
We will check on the results of this run a little later. 

Leave the `run` command running in your terminal, and open a new terminal (if you are in VS Code, do this by clicking the `+` icon in the top right corner of your terminal).

This new terminal will be for basic commands only, not submitting another workflow run, as we do not have sufficient CPU and memory on the VM to run two workflows concurrently.
:::

### **2.3.4. Custom resource configuration using process labels**

Capping workflow resources using the `max` parameters is a bit of a blunt instrument. 

To achieve optimum computational efficiency on your platform, more granular control may be required. 

::: {.callout-note collapse=true}
### For example, consider the case of a 16 core machine eg Nimbus 'c16r64'

If you appled `--max_cpus 16` to the nf-core rnaseq workflow, the STAR_ALIGN module would still only utilise 12 CPUs, as this module (as we learnt in 2.3.1) has the label `process_high` which sets CPUs to 12.

If there were no processes with fulfilled input channels that could make use of the 4 remaining CPUs, those resources would sit idle until the STAR_ALIGN process had completed. 

Optimisation for this platform might for example set `max_cpus` to 8 so two samples could be aligned concurrently, or over-ride the CPU resources assigned to the STAR_ALIGN module to 16. 
:::

The next two lessons will demonstrate how to achieve this using custom configuration files that fine-tune resources using `process labels` to assign the same resources to groups of processes sharing the same label, or `withName` to target specific processes. 

In order to do this, we need to use the `process` scope. Nextflow has a number of different [`scopes`](https://www.nextflow.io/docs/latest/config.html) that can be included in configuration files, for example the `params` scope you covered in [lesson 1.3](1.3_configure.html) and applied to your config in lesson 2.3.3.

Within the `process` scope, we can configure resources and additional arguments for processes.
<br/>



::: {.callout-warning}
The following exercise is trivial given the limitations of our VMs. Consider how this approach can be really powerful when working on HPC or cloud infrastructures, where the [`executor`](https://www.nextflow.io/docs/latest/executor.html) and [`queue`](https://www.nextflow.io/docs/latest/process.html#queue) directives enable you to take full advantage of the compute resources available on your platform.   
:::
<br/>

Edit `custom-nimbus.config` to set `cpus = 2` and `memory = 6.GB` using `process labels` within the `process` scope:

::: {.callout-note}
- :bulb: View the file `nf-core-rnaseq-3.11.1/workflow/conf/base.config` for syntax example 
- Delete the `max_cpus` and `max_memory` parameters from the `params` scope 
- Add a `process` scope inside the `workshop` profile
- Use `withLabel: <label_name>` to set resources for each of the following labels:
  - `process_low`
  - `process_medium`
  - `process_high`
:::


```default
// Nimbus nf-core workshop configuration profile

profiles {
    workshop {
        singularity {
            enabled = true
            autoMounts = true
            cacheDir = '/home/training/singularity_cache'
        }
        params {
            config_profile_description = 'Pawsey Nimbuc c2r8 profile'
        }
        process {
            withLabel: process_low {
                cpus = 2
                memory = 6.GB
            }
            withLabel: process_medium {
                cpus = 2
                memory = 6.GB
            } 
            withLabel: process_high {
                cpus = 2
                memory = 6.GB
            }
        }
    }
}
```

Save the file then re-run the workflow with our custom configuration, setting `outdir` parameter to `Lesson-2.3.4`:

::: callout-warning
### Before executing this run command
If you haven't done so already, check that the run from lession 2.3.3 has completed successfully.

You run should have a summary message similar to below:

```default
-[nf-core/rnaseq] Pipeline completed successfully with skipped sampl(es)-
-[nf-core/rnaseq] Please check MultiQC report: 2/2 samples failed strandedness check.-
Completed at: 11-May-2023 13:21:50
Duration    : 7m 8s
CPU hours   : 0.2
Succeeded   : 66
```
with the following output directories:
```default
$ ls Lesson-2.3.3
fastqc  multiqc  pipeline_info  star_salmon  trimgalore
```
::: 

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.3.4 \
  -resume 
```

:eyes: Notice that the **Max job request options** are no longer listed on the run log printed to screen, because we are setting them within the `process` scope rather than `params` scope.


::: {.callout-note}
### Configuration order of priority
Recall the [order of priority](https://www.nextflow.io/docs/latest/config.html#configuration-file) in which parameters and configurations are applied by Nextflow. 

The settings we specify with  `-c custom-nimbus.config` will over-ride those that appear in the default nf-core configurations `workflow/nextflow.config` and `workflow/conf/base.config`. 

Settings that are not over-ridden by `-c <config>` or any parameter from params file or provided on the command line will still be set to the nf-core defaults specified in `nextflow.config`, `base.config` or `main.nf`.

To avoid confusion, it is best not to name your custom configuration files `nextflow.config`!

![](../figs/2.3_config_priority_order.png)
::: 


### **2.3.5. Custom resource configuration using process names**

This exercise will demonstrate how to adjust the resource configurations for a specific process using the `withName` process selector, using the STAR_ALIGN module as example. 

`withName` is a powerful tool:

- Specifically target individual modules
- Multiple module names can be supplied using wildcards or 'or' (`*` or `|`) notation
- No need to edit the module `main.nf` file to add a process label
- Has a [higher priority](https://www.nextflow.io/docs/latest/config.html#selector-priority) than `withLabel` 

To utilise `withName`, we first need to ensure we have the correct and specific **executuion path** for the module/modules that we wish to target.

 Identify the execution path for the STAR_ALIGN module:

::: {.callout-note}
### Finding the module execution path
Recall from [lesson 1.3.5](1.3_configure.html#default-configuration-files) the following tips: 

- The extended execution path is built from the pipeline, workflow, subworkflow, and module names
- It can be tricky to evaluate the path used to execute a module. If you are unsure of how to build the path you can copy it from the `workflow/conf/modules.config` file
:::

You can [view the modules.conf file on Github](https://github.com/nf-core/rnaseq/blob/master/conf/modules.config) or search your local copy:

```default
grep STAR nf-core-rnaseq-3.11.1/workflow/conf/modules.config
```
```default
withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES|HISAT2_BUILD' {
// STAR Salmon alignment options
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_TX2GENE' {
        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_TXIMPORT' {
        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_SE_.*' {
            withName: 'DESEQ2_QC_STAR_SALMON' {
// STAR RSEM alignment options
```
<br/><br/>

::: {.callout-note}
### 
- Note that this does not provide the PIPELINE or WORKFLOW name at the front of the path.  You can add these manually (eg `PIPELINE` is NFCORE_RNASEQ and `WORKFLOW` is RNASEQ) but the path within `modules.config` is usually all that is required for specificity within a workflow
- If you have previously run the pipeline, you could also extract the complete module execution path from your run log printed to screen, or the execution trace, timeline or report files within `<outdir>/pipeline_info` 
:::

For STAR_ALIGN within the `nf-core/rnaseq` workflow, any of the following would be correct and specific:

``` default
'NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN'
'.*:RNASEQ:ALIGN_STAR:STAR_ALIGN'
'.*:ALIGN_STAR:STAR_ALIGN'
```

<br/><br/>

Continue editing `custom-nimbus.config`. Inside the `process` scope, provide the execution path for the STAR_ALIGN module to the `withName` selector:

```default
process {
  withName: '.*:RNASEQ:ALIGN_STAR:STAR_ALIGN' {
  }
}      
```
<br/>

Then set CPU to 24 and memory to 96 GB:

```default
process {
  withName: '.*:RNASEQ:ALIGN_STAR:STAR_ALIGN' {
    cpus = 24
    memory = 96.GB
  }
} 
```  

::: {.callout-caution collapse="true"}
### Completed config file

```default
// Nimbus nf-core workshop configuration profile

process {
    cache = 'lenient'    
}

profiles {
    workshop {
        singularity {
            enabled = true
            autoMounts = true
            cacheDir = '/home/training/singularity_cache'
        }
        params {
            config_profile_description = 'Pawsey Nimbuc c2r8 profile'
        }
        process {
            withLabel: process_low {
                cpus = 2
                memory = 6.GB
            }
            withLabel: process_medium {
                cpus = 2
                memory = 6.GB
            } 
            withLabel: process_high {
                cpus = 2
                memory = 6.GB
            }
            withName: '.*:RNASEQ:ALIGN_STAR:STAR_ALIGN' {
                cpus = 24
                memory = 96.GB
            }
        }
    }
}
```
:::



 Save the config then resume your run, setting `outdir` to `Lesson-2.3.5`, once again applying your `workshop` profile from `custom-nimbus.config`:

```default
nextflow run nf-core-rnaseq-3.11.1/workflow/main.nf \
  -profile workshop \
  -c custom-nimbus.config \
  -params-file workshop-params.yaml \
  --outdir Lesson-2.3.5 \
  -resume 
```

If your execution path for the STAR_ALIGN module was specified correctly, your run should have died with the error shown below because Nextflow checks that the resources requested are available before executing a workflow:  

![](../figs/2.3_star_failed_resources.png)



::: {.callout-tip}
### Thoughts? :thought_balloon:
What do you expect would happen to your run if your execution path for the STAR_ALIGN module was **not** specified correctly?
:::

::: {.callout-note appearance="simple" collapse="true"}
### Answer
In this case, our pipeline would complete OK, because the resources for the STAR_ALIGN process have been appropriately set for our VM using the `process_high` label within our `custom-nimbus.config`. 

The directives set within the `withName` scope would not be applicable, and a warning would be printed, eg
```default
WARN: There's no process matching config selector: .*:RNASEQ:ALIGN_STAR:STARALIGN
```
:::



::: {.callout-note}
### **Key points**
- nf-core workflows work 'out of the box' but there are compute and software configurations we should customise for our runs to work well on our compute infrastructure
- nf-core executes by default with `workflow/nextflow.config` and `workflow/conf/base.config` and has a repository of community-contributed institutional configs that ship with the workflow 
- we can write (and contribute) our own institutional config for reproducible runs on our compute platform 
- custom configs can be applied to a run with `-c <config_name>`, and will over-ride settings in the default configs
- customisations can be targeted to specific processes using `withLabel` or `withName`
- workflow parameters belong in `-params-file <params_file>` and not `-c <custom_config>`
:::

---
^*These materials are adapted from [Customising Nf-Core Workshop](https://sydney-informatics-hub.github.io/customising-nfcore-workshop/notebooks/1.2_nfcore.html) by Sydney Informatics Hub*^